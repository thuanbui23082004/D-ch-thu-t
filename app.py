import streamlit as st
from transformers import AutoTokenizer, AutoModelForSeq2SeqLM

@st.cache_resource
def load_model():
    model_name = "facebook/nllb-200-distilled-600M"
    tokenizer = AutoTokenizer.from_pretrained(model_name)
    model = AutoModelForSeq2SeqLM.from_pretrained(model_name)
    return tokenizer, model

# M√£ ng√¥n ng·ªØ NLLB (3 ng√¥n ng·ªØ ch√≠nh)
lang_codes = {
    "Ti·∫øng Vi·ªát": "vie_Latn",
    "Ti·∫øng Anh": "eng_Latn",
    "Ti·∫øng Ph√°p": "fra_Latn"
}

def translate(text, src_lang, tgt_lang, tokenizer, model):
    tokenizer.src_lang = lang_codes[src_lang]
    encoded = tokenizer(text, return_tensors="pt", padding=True, truncation=True)
    bos_token_id = tokenizer.convert_tokens_to_ids(lang_codes[tgt_lang])
    generated = model.generate(**encoded, forced_bos_token_id=bos_token_id)
    return tokenizer.batch_decode(generated, skip_special_tokens=True)[0]

# Streamlit UI
st.title("üåê D·ªãch Anh - Vi·ªát - Ph√°p b·∫±ng NLLB")

with st.expander("Ch·ªçn ng√¥n ng·ªØ d·ªãch"):
    src = st.selectbox("Ng√¥n ng·ªØ ngu·ªìn:", list(lang_codes.keys()))
    tgt = st.selectbox("Ng√¥n ng·ªØ ƒë√≠ch:", [l for l in lang_codes.keys() if l != src])

tokenizer, model = load_model()

uploaded_file = st.file_uploader("Ho·∫∑c t·∫£i file .txt l√™n ƒë·ªÉ d·ªãch", type=["txt"])
translated_text = None

if uploaded_file is not None:
    raw_text = uploaded_file.read().decode("utf-8")
    st.markdown(f"**N·ªôi dung file ƒë√£ t·∫£i l√™n ({len(raw_text)} k√Ω t·ª±):**")
    st.write(raw_text)
    col1, col2, col3 = st.columns([1.3, 1, 1])
    with col2:
        if st.button("‚ú® D·ªãch file", key="btn_translate_file"):
            with st.spinner("ƒêang d·ªãch file..."):
                translated_text = translate(raw_text, src, tgt, tokenizer, model)
                st.success("‚úÖ D·ªãch file th√†nh c√¥ng!")

else:
    text = st.text_area(f"Nh·∫≠p vƒÉn b·∫£n ti·∫øng {src}:", height=150)
    col1, col2, col3 = st.columns([1.3, 1, 1])
    with col2:
        if st.button("‚ú® D·ªãch vƒÉn b·∫£n", key="btn_translate_text"):
            if not text.strip():
                st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p vƒÉn b·∫£n ƒë·ªÉ d·ªãch.")
            else:
                with st.spinner("ƒêang d·ªãch vƒÉn b·∫£n..."):
                    translated_text = translate(text, src, tgt, tokenizer, model)
                    st.success("‚úÖ D·ªãch vƒÉn b·∫£n th√†nh c√¥ng!")

if translated_text:
    st.markdown(f"### K·∫øt qu·∫£ d·ªãch sang ti·∫øng {tgt}:")
    st.text_area("K·∫øt qu·∫£ d·ªãch", value=translated_text, height=150)
    st.download_button(
        label="‚¨áÔ∏è T·∫£i k·∫øt qu·∫£ d·ªãch v·ªÅ",
        data=translated_text,
        file_name=f"translated_{src}_to_{tgt}.txt",
        mime="text/plain"
    )
